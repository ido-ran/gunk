<?xml version="1.0" encoding="utf-8"?>

<!-- This is an auto generated file and is not intended for modification. -->

<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" xmlns:flexui="flexunit.flexui.*" creationComplete="onCreationComplete()">
	<fx:Script>
		<![CDATA[
			import ee.gunk.metadata.MethodMetadataBuilderTest;
			import ee.gunk.util.assertAbstractTest;
			import ee.gunk.features.PropertyInjectionTest;
			import by.blooddy.crypto.MD5Test;
			import ee.gunk.features.CompositionInjectionTest;
			import ee.gunk.features.CircularDependencyTest;
			import ee.gunk.metadata.ConstructorMetadataBuilderTest;
			import org.flexunit.runner.Request;
			import ee.gunk.metadata.PropertyMetadataBuilderTest;
			import ee.gunk.metadata.ClassMetadataFactoryTest;
			import ee.gunk.internals.BinderTest;
			import ee.gunk.features.MethodInjectionTest;
			import ee.gunk.internals.DependencyInjectorTest;
			import ee.gunk.internals.InjectorTest;
			import ee.gunk.metadata.AnnotationMetadataBuilderTest;
			import ee.gunk.features.ModuleProvidesTest;
			import ee.gunk.features.ConstructorInjectionTest;
			import ee.gunk.SignatureTest;
			import ee.gunk.internals.DependencyFactoryTest;
			import ee.gunk.internals.AnnotationRegistryTest;
			import ee.gunk.internals.BindingRegistryTest;
			import ee.gunk.internals.BindingBuilderTest;
			
			public function currentRunTestSuite():Array
			{
				var testsToRun:Array = new Array();
				
				testsToRun.push(Request.methods(ee.gunk.internals.BindingBuilderTest,["testToProvider",
					"testTo",
					"testBindingBuilder_providedByType",
					"testAnnotatedWith_annotationType",
					"testBindingBuilder",
					"testTo_type",
					"testInScope_scope",
					"testBindingBuilder_untargettedSignature",
					"testInScope",
					"testBindingBuilder_untargetted",
					"testAnnotatedWith_annotationType_annotations",
					"testTo_singletonAnnotation",
					"testToInstance",
					"testAnnotatedWith_annotationInstance",
					"testToInstance_instance",
					"testBindingBuilder_implementedBy",
					"testBindingBuilder_unknownProvidedBy",
					"testBindingBuilder_unknownImplementedBy",
					"testToProvider_type",
					"testAnnotatedWith_annotationTypeArray",
					"testBindingBuilder_implementedByType",
					"testToProvider_singletonAnnotation",
					"testToProviderInstance",
					"testAnnotatedWith_annotationTypeVector",
					"testToProviderInstance_instance",
					"testBindingBuilder_providedBy",
					"testBindingBuilder_singletonAnnotation",
					"testAsSingleton",
					"testBindingBuilder_untargettedType",
					"testAnnotatedWith_annotationInstanceArray",
					"testAsSingleton_scope",
					"testAnnotatedWith_annotationInstanceVector"]));
				
				testsToRun.push(Request.methods(ee.gunk.internals.BindingRegistryTest,["testSetBindingAt_error",
					"testGetBinding",
					"testAddBinding",
					"testGetBinding_null",
					"testHasBinding_false",
					"testHasBinding_true"]));
				
				testsToRun.push(Request.methods(ee.gunk.internals.AnnotationRegistryTest,["testRegisterAnnotationType",
					"testGetAnnotation_annotationName",
					"testCreateInstance_defaultValueNull",
					"testGetAnnotation_defaultValue",
					"testCreateInstance_valuesNull",
					"testGetAnnotation_values",
					"testCreateInstance",
					"testCreateInstance_type",
					"testGetAnnotation_type",
					"testRegisterAnnotationType_error",
					"testGetAnnotation",
					"testCreateInstance_usingFactory",
					"testCreateInstance_error",
					"testRegisterAnnotationFactory",
					"testGetAnnotation_unknown"]));
				
				testsToRun.push(Request.methods(ee.gunk.internals.DependencyFactoryTest,["testCreateClassDependencies_constructorDependencies_argumentDependency_annotations",
					"testCreateClassDependencies_methodDependencies_multipleArgumentDependency",
					"testCreateClassDependencies_noAnnotations",
					"testCreateDependency_error",
					"testCreateDependency_cache",
					"testCreateClassDependencies_methodDependencies_name",
					"testCreateDependency_annotations",
					"testCreateClassDependencies_propertyDependencies_name",
					"testCreateClassDependencies_propertyDependencies",
					"testCreateClassDependencies_methodDependencies",
					"testCreateDependency",
					"testCreateClassDependencies_propertyDependencies_dependency_annotations",
					"testCreateClassDependencies_constructorDependencies_argumentDependency_type",
					"testCreateClassDependencies_propertyDependencies_dependency_type",
					"testCreateClassDependencies_constructorDependencies_singleArgumentDependency",
					"testCreateClassDependencies_constructorDependencies_name",
					"testCreateDependency_type",
					"testCreateClassDependencies_constructorDependencies",
					"testCreateClassDependencies_constructorDependencies_argumentDependencies",
					"testCreateClassDependencies",
					"testCreateClassDependencies_propertyDependencies_dependency"]));
				
				testsToRun.push(Request.methods(ee.gunk.SignatureTest,["testSignature_hashAnnotationsEqual",
					"testSignature_fullHashTypeNotEqual",
					"testSignature",
					"testSignature_hashTypeNotEqual",
					"testSignature_fullHashAnnotationsNotEqual",
					"testGetType",
					"testGetAnnotations",
					"testGetHash",
					"testSignature_hashTypeEqual",
					"testSignature_fullHashAnnotationsEqual",
					"testSignature_hashAnnotationsNotEqual",
					"testSignature_fullHashTypeEqual"]));
				
				testsToRun.push(Request.methods(ee.gunk.features.ConstructorInjectionTest,["testProvider",
					"testCustomAnnotation",
					"testSingleArgument",
					"testNamed",
					"testMultipleArgument",
					"testSingleArgumentNoSingleton",
					"testSingleton",
					"testImplementedBy",
					"testProvidedBy"]));
				
				testsToRun.push(Request.methods(ee.gunk.features.ModuleProvidesTest,["testProvides"]));
				
				testsToRun.push(Request.methods(ee.gunk.metadata.AnnotationMetadataBuilderTest,["testBuild_defaultValue",
					"testBuild_methodAnnotationMetadata",
					"testBuildFromString_emptyWithWhiteSpace",
					"testBuild_methodAnnotationMetadata_missingArgument",
					"testBuildFromString_multipleEntries",
					"testBuildFromString_singleKeyWithWhiteSpace",
					"testBuildFromString_empty",
					"testBuildFromString_multiple",
					"testBuildFromString_singleKey",
					"testBuild_values",
					"testBuild_multipleKey",
					"testBuildFromString_defaultValueWithWhiteSpace",
					"testBuildFromString_single",
					"testBuildFromString_values",
					"testBuildFromString_defaultValue",
					"testBuild_singleKey",
					"testBuildFromString_multipleEntriesWithWhiteSpace",
					"testBuildFromString_valuesWithWhiteSpace",
					"testBuild_empty",
					"testBuildFromString_multipleKeyWithWhiteSpace",
					"testBuildFromString_multipleKey"]));
				
				testsToRun.push(Request.methods(ee.gunk.internals.InjectorTest,["testGetProvider",
					"testGetInstance",
					"testInjector",
					"testGetProviderFor",
					"testInjectDependencies"]));
				
				testsToRun.push(Request.methods(ee.gunk.internals.DependencyInjectorTest,["testCreateInstance_property1",
					"testCreateInstance_keyAwareProvider",
					"testCreateInstance_accessor1",
					"testCallMethodWithDependencies",
					"testCreateInstance_type",
					"testCreateInstance",
					"testCreateInstance_cArgument1",
					"testCreateInstance_m1Argument1"]));
				
				testsToRun.push(Request.methods(ee.gunk.features.MethodInjectionTest,["testMultipleArguments",
					"testSingleArgument",
					"testNamed",
					"testProvider",
					"testCustomAnnotation",
					"testNotInjected",
					"testProvidedBy",
					"testSingleton",
					"testImplementedBy"]));
				
				testsToRun.push(Request.methods(ee.gunk.internals.BinderTest,["testGetBinding",
					"testBindAnnotationFactory",
					"testBindSignature",
					"testInstall",
					"testBind"]));
				
				testsToRun.push(Request.methods(ee.gunk.metadata.ClassMetadataFactoryTest,["testGetClassMetadata_implementedTypes",
					"testGetClassMetadata_interfaceAnnotations",
					"testGetClassMetadata_type",
					"testGetClassMetadata_constructor",
					"testGetClassMetadata_annotations",
					"testGetClassMetadata_methods",
					"testGetClassMetadata_noAnnotations",
					"testGetClassMetadata_properties",
					"testGetClassMetadata"]));
				
				testsToRun.push(Request.methods(ee.gunk.metadata.PropertyMetadataBuilderTest,["testBuild_propertiesName",
					"testBuild_accessorsType",
					"testBuild_accessorsSingleAnnotation",
					"testBuild_propertiesType",
					"testBuild_properties",
					"testBuild_accessorsMultipleAnnotation",
					"testBuild_propertiesSingleAnnotation",
					"testBuild_propertiesMultipleAnnotation",
					"testBuild_noAnnotations",
					"testBuild_accessorsName",
					"testBuild_accessors"]));
				
				testsToRun.push(Request.methods(ee.gunk.metadata.ConstructorMetadataBuilderTest,["testBuild_argumentType",
					"testBuild_singleArgument",
					"testBuild_annotations",
					"testBuild_argument",
					"testBuild_arguments",
					"testBuild_annotatedConstructor",
					"testBuild_name",
					"testBuild_noAnnotations",
					"testBuild",
					"testBuild_type",
					"testBuild_multipleArgument"]));
				
				testsToRun.push(Request.methods(ee.gunk.features.CircularDependencyTest,["testCircularInjection"]));
				
				testsToRun.push(Request.methods(ee.gunk.features.CompositionInjectionTest,["testProperty_accessorInjection",
					"testProperty_propertyInjection",
					"testProperty_methodInjection",
					"testProperty_constructorInjection"]));
				
				testsToRun.push(Request.methods(by.blooddy.crypto.MD5Test,["testHash"]));
				
				testsToRun.push(Request.methods(ee.gunk.features.PropertyInjectionTest,["testNotInjected",
					"testCustomAnnotation",
					"testNamed",
					"testProvider",
					"testProperty",
					"testProvidedBy",
					"testSingleton",
					"testImplementedBy"]));
				
				testsToRun.push(Request.methods(ee.gunk.util.assertAbstractTest,["testAssertAbstract"]));
				
				testsToRun.push(Request.methods(ee.gunk.metadata.MethodMetadataBuilderTest,["testBuild_argumentType",
					"testBuild_typeNull",
					"testBuild_typeNotNull",
					"testBuild_multipleArgumentAnnotation",
					"testBuild_singleArgumentAnnotation",
					"testBuild_multipleArgumentAnnotation_null",
					"testBuild_singleArgument",
					"testBuild_multipleArguments",
					"testBuild_singleAnnotation",
					"testBuild_name",
					"testBuild_noAnnotations",
					"testBuild_multipleAnnotations",
					"testBuild"]));
				return testsToRun;
			}
			
			
			private function onCreationComplete():void
			{
				testRunner.runWithFlexUnit4Runner(currentRunTestSuite(), "Gunk");
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<flexui:FlexUnitTestRunnerUI id="testRunner">
	</flexui:FlexUnitTestRunnerUI>
</s:Application>
